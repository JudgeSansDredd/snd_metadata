<style>
    @font-face {
    font-family: "nodesto-condensed";
    src: url("/proxy/https://github.com/jonathonf/solbera-dnd-fonts/raw/master/Nodesto%20Caps%20Condensed/Nodesto%20Caps%20Condensed.otf") format("opentype");
    font-weight: normal;
  }

  @font-face {
    font-family: "Scaly Sans";
    src: url("/proxy/https://github.com/jonathonf/solbera-dnd-fonts/raw/master/Scaly%20Sans/Scaly%20Sans.otf") format("opentype");
    font-weight: normal;
  }

  .CardFront {
    width: auto;
    border-radius: 8px;
    background-color: black;
  }

  .CardContent {
    padding: 10px 10px 6px;

    font-family: "Scaly Sans", serif;
    font-style: normal;
    font-weight: 300;
  }

  .CardContent hr {
    margin: 0;
    height: 3px;
  }

  .Title {
    padding: 2px 8px;
    background-color: #e8ebec;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    font-size: 2rem;
    line-height: 2rem;
    font-family: "nodesto-condensed", serif;
    font-weight: normal;
    font-style: normal;
    text-transform: uppercase;
    text-align: center;
  }

  .Subtitle {
    padding: 4px;
    text-align: center;
    color: #e8ebec;
    font-size: 1.15rem;
    line-height: 1.15rem;
  }

  .DetailsContainer {
    overflow: auto;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;

  }

  .DetailsBlock {
    padding: 3px 8px;
    background-color: #e8ebec;
    font-size: 1.15rem;
    line-height: 1.25rem;
    padding: 8px;
  }

  .DetailsBlock > div:nth-child(even) {
    background-color: lightgray;
  }

  .CardFooter {
    margin-top: 2px;
    display: flex;
    justify-content: space-between;
    color: #e8ebec;
    font-size: 1.25rem;
    line-height: 1.25rem;
    font-weight: bold;
  }

  .Category {
    font-size: 1.25rem;
    line-height: 1.25rem;
    font-family: "nodesto-condensed", serif;
    font-weight: normal;
    font-style: normal;
    text-align: center;
  }
  
  .row {
    display: flex;
    padding: 4px;
    align-items: center;
  }
  
  .encounter-details {
    padding: 5px;
    margin-left: 10px;
  }
  
  .smiley {
    min-height: 75px;
    max-height: 75px;
    min-width: 50px;
    max-width: 50px;
  }
</style>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<div class="CardFront">
  <div class="CardContent">
    <div class="Title" id="rand-word">Some Title</div>
    <div class="Subtitle">Some Subtitle</div>
    <div class="DetailsContainer">
      <div class="DetailsBlock" id="DetailsBlock">
      </div>
    </div>
  </div>
</div>
<script>
  function getImg(difficulty) {
    if(difficulty === "deadly") {
      return "{{ images["deadly.png"] }}";
   } else if(difficulty === "easy") {
     return "{{ images["easy.png"] }}";
   } else if(difficulty === "medium") {
     return "{{ images["medium.png"] }}";
   } else if(difficulty === "hard") {
     return "{{ images["hard.png"] }}";
   } else {
     return "";
   }
  }
  
  async function getEncounters() {
    const target = document.getElementById("DetailsBlock");
    const n_pc = {{ config.n_pc }};
  	const level = {{ config.level }};
    const difficulty = "{{ config.difficulty.selected }}";
    const environment = "{{ config.environment.selected }}";
    const loot_type = "{{ "" if config.loot_type.selected == "None" else config.loot_type.selected }}"
    const n = {{ config.n_encounters }};
    const res = await axios.get("https://donjon.bin.sh/5e/random/rpc-5e.fcgi", {
      params: {
        type: "Encounter",
        n_pc,
        level,
        difficulty,
        environment,
        loot_type,
        n
      }
    });
    const {data} = res;
    data.forEach(encounter => {
      // Parse data
      const [lineup, difficultyAndXp, ...treasure] = encounter.split(';');
      const [difficulty, xp] = difficultyAndXp.split(',').map(val => val.trim());
      console.log("{{ images[deadly.png]}}");
      console.log(difficulty);
      
      // Create row
      const row = document.createElement("div");
      target.appendChild(row);
      row.classList.add("row");
      
      // Create Image
      const img = document.createElement("div");
      row.appendChild(img);
      img.outerHTML = `<img src="${getImg(difficulty)}" alt="" width="32" height="32" />`;
      
      // Create details
      const encounterDetails = document.createElement("div");
      row.appendChild(encounterDetails);
      encounterDetails.classList.add("encounter-details");
      if(treasure.length) {
        const encounterWithTreasure = `${lineup}<br /><br />${treasure.map(t => t.trim()).join(', ').replace('treasure', 'Treasure:')}`;
        encounterDetails.innerHTML = encounterWithTreasure;
      } else {
        encounterDetails.innerHTML = lineup;
      }
    });
  }
  getEncounters();
</script>